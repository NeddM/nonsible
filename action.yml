name: 'Executing Nonsible'
description: 'Custom action that executes Nonsible'

inputs:
  targetAsSecret:
    description: 'Mark true if you want to run the targets as a Github secret.'
    required: true
  targetYAML:
    description: 'The YAML file or Github secret that contains the connections data.'
    required: true
  taskYAML:
    description: 'The YAML file that contains the tasks to run.'
    required: true
  force:
    description: 'Runs Nonsible even if a connection is failed.'
    required: false
  continueonerror:
    description: "Runs Nonsible even if a connection failed, and executes every task on failed connections too."
    required: false
  nocolor:
    description: 'Print more information about the tasks, but could print some sensible data.'
    required: false
runs:
  using: "composite"
  steps:
    - name: Clear repository
      shell: bash
      run: sudo rm -fr $GITHUB_WORKSPACE && mkdir $GITHUB_WORKSPACE

    - name: Checkout del cÃ³digo
      uses: actions/checkout@v3

    - name: Log check
      shell: bash
      run: echo "Executing the Nonsible custom action"

    - name: Setting up arguments
      id: setup_args
      shell: bash
      run: |
        echo "Setting up arguments"
        args=""

        if [ "${{ inputs.force }}" != false ]; then
          args+=" --force"
        fi
        if [ "${{ inputs.continueonerror }}" != false ]; then
          args+=" --continueonerror"
        fi
        if [ "${{ inputs.nocolor }}" != false ]; then
          args+=" --no-color"
        fi

        echo "setup_args=$args" >> $GITHUB_OUTPUT
        echo $GITHUB_OUTPUT

    - uses: robinraju/release-downloader@v1.8
      with:
        repository: "NeddM/nonsible"
        latest: true
        fileName: "nonsible"

    - name: chmod ssh-keys
      shell: bash
      run: |
        if [ "${{ inputs.targetAsSecret }}" == true ]; then
          echo "${{ inputs.targetYAML }}" | base64 --decode > sshkeys.yaml
          yq eval '.[].pem' sshkeys.yaml | while read -r pem; do
          echo "Valor de pem: $pem"
          chmod 600 $pem
          done
        else
          yq eval '.[].pem' "${{ inputs.targetYAML }}" | while read -r pem; do
          echo "Valor de pem: $pem"
          chmod 600 $pem
          done
        fi

    - name: chmod nonsible
      shell: bash
      run: chmod 777 nonsible

    - name: Run Nonsible
      shell: bash
      run: |
        echo "Run Nonsible"

        if [ "${{ inputs.targetAsSecret }}" == true ]; then
          echo "${{ inputs.targetYAML }}" | base64 --decode > nonsibleTargetAsSecret.yaml
          ./nonsible ./nonsibleTargetAsSecret.yaml ${{ inputs.taskYAML }} ${{ steps.setup_args.outputs.setup_args }}
        else
          ./nonsible ${{ inputs.targetYAML }} ${{ inputs.taskYAML }} ${{ steps.setup_args.outputs.setup_args }}
        fi
